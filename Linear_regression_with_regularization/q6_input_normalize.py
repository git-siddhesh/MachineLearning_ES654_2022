# -*- coding: utf-8 -*-
"""Q6_input_normalize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f7kCUuDOHfftApIrWG1t-OUn2FVdaxeV
"""

# Using StandardScaler() from sklearn, run any of the regression 
# algorithms above and plot the errors with normalized as well as unnormalized data


import numpy as np
from sklearn.datasets import make_regression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import os

if not os.path.exists('Plots/Question6_2/'):
    os.makedirs('Plots/Question6_2/')


def mean_squared_error(y_true, y_pred):
    return np.mean((y_true - y_pred)**2)

# Generate data
X, y = make_regression(n_samples=200, n_features=5, random_state=52)

# Split data into train and test

# train test split with random ness 0
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
# split_ratio = 0.8
# split_index = int(split_ratio * 200)
# X_train, y_train = X[:split_index], y[:split_index]
# X_test, y_test = X[split_index:], y[split_index:]

# Normalize data
scaler = StandardScaler()
X_train_norm = scaler.fit_transform(X_train)
X_test_norm = scaler.transform(X_test)

# Fit the model
model = LinearRegression()
model.fit(X_train_norm, y_train)

# Predict on test data
y_pred_norm = model.predict(X_test_norm)

# Calculate the error
error_norm = mean_squared_error(y_test, y_pred_norm)
print('Normalized Data Error: ', error_norm)


# Fit the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Calculate the error
error = mean_squared_error(y_test, y_pred)
print('Unnormalized Data Error: ', error)


plt.bar(['Unnormalized', 'Normalized'], [error, error_norm])
plt.ylabel('Mean Squared Error')
plt.title('Mean Squared Error for Unnormalized and Normalized Data')
plt.savefig('Plots/Question6_2/MSE_for_unnorm_and_norm_data.png')
plt.show()


plt.scatter(y_pred, y_test - y_pred, label='Unnormalized')
plt.scatter(y_pred_norm, y_test - y_pred_norm, label='Normalized')
plt.legend()
plt.xlabel('Predicted Values')
plt.ylabel('Errors')
plt.title('Errors for Unnormalized and Normalized Data')
plt.savefig('Plots/Question6_2/Errors_for_unnorm_and_norm_data.png')
plt.show()