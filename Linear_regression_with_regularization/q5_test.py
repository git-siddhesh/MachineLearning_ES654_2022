# # -*- coding: utf-8 -*-
# """Q5_test.ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/19fLBYgrxvEcH2qfm0URlFaLuEUyLMibB
# """


# import numpy as np
# import pandas as pd
# import matplotlib.pyplot as plt
# from preprocessing.polynomial_features import PolynomialFeatures
# from linearRegression.linear_regression import LinearRegression
# import os.path
# from sklearn.preprocessing import StandardScaler
# from os import path

# if not path.exists('Plots/Question5/'):
#     os.makedirs('Plots/Question5/')

# # TODO : Write here

# def generate_data(N):
#     np.random.seed(0)
#     X = np.random.rand(N, 1)
#     y = X.squeeze()**2 + 0.1*np.random.randn(N)
#     return X, y

# degrees = [1, 3, 5, 7, 9]
# N_list = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

# for degree in degrees:
#     theta_norm_list = []
#     for N in N_list:
#         x, y = generate_data(N)
#         pFeatures = PolynomialFeatures(degree=degree)
#         X_poly = pFeatures.transform(x)
#         scaler = StandardScaler()
#         X_poly_scaled = scaler.fit_transform(X_poly)
#         LR = LinearRegression()
#         # batch_size = min(N,12)
#         LR.fit_gradient_descent(X_poly_scaled, y, gradient_type='manual', penalty_type='l2', alpha=0.05, batch_size=1, num_iters=10, lr=0.01)
#         theta_norm_list.append(np.linalg.norm(LR.coef_))
    
#     plt.plot(N_list, theta_norm_list, label=f"degree={degree}")
    
# plt.xlabel("N (size of dataset)")
# plt.ylabel("Magnitude of norm of parameter vector, theta")
# plt.legend()
# plt.savefig('Plots/Question5/theta_norm_vs_N.png')
# plt.show()

# -*- coding: utf-8 -*-
"""Q5_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19fLBYgrxvEcH2qfm0URlFaLuEUyLMibB
"""


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from preprocessing.polynomial_features import PolynomialFeatures
from linearRegression.linear_regression import LinearRegression
import os.path
from sklearn.preprocessing import StandardScaler
from os import path

if not path.exists('Plots/Question5/'):
    os.makedirs('Plots/Question5/')

# TODO : Write here

def generate_data(N):
    np.random.seed(0)
    X = np.random.rand(N, 1)
    y = X.squeeze()**2 + 0.1*np.random.randn(N)
    return X, y
    # X = np.array([i*np.pi/180 for i in np.linspace(60,300,N)])
    # y = 3*X + 8 + np.random.normal(0,3,len(X))
    # X = X.reshape(X.shape[0], 1)
    # return X, y

degrees = [1, 3, 5, 7, 9]
# N_list = [i for i in range(10, 101, 10)]
N_list = [10000, 100000, 1000000]

# for degree in degrees:
#     theta_norm_list = []
#     for N in N_list:
#         x, y = generate_data(N)
#         pFeatures = PolynomialFeatures(degree=degree)
#         X_poly = pFeatures.transform(x)
#         scaler = StandardScaler()
#         X_poly_scaled = scaler.fit_transform(X_poly)
#         LR = LinearRegression()
#         LR.fit_gradient_descent(X_poly_scaled, y, gradient_type='manual', penalty_type='l2', penalty_value=0.05, batch_size=10, num_iters=100, lr=0.01)
#         theta_norm_list.append(np.linalg.norm(LR.coef_))
    
#     plt.plot(N_list, theta_norm_list, label=f"degree={degree}")
    
# plt.xlabel("N (size of dataset)")
# plt.ylabel("Magnitude of norm of parameter vector, theta")
# plt.legend()
# plt.savefig('Plots/Question5/plot1.png')
# plt.show()


for N in N_list:
    theta_norm_list = []
    x, y = generate_data(N)
    for degree in degrees:
        pFeatures = PolynomialFeatures(degree=degree)
        X_poly = pFeatures.transform(x)
        scaler = StandardScaler()
        X_poly_scaled = scaler.fit_transform(X_poly)
        LR = LinearRegression()
        LR.fit_sklearn_LR(X_poly_scaled, y)
        theta_norm_list.append(np.linalg.norm(LR.coef_))
    
    plt.plot(degrees, theta_norm_list, label=f"N={N}")
    
plt.xlabel("Degree of polynomial")
plt.ylabel("Magnitude of norm of parameter vector, theta")
plt.legend()
plt.title("Magnitude of norm of parameter vector, theta vs Degree of polynomial")
plt.savefig('Plots/Question5/theta_norm_vs_degree.png')
plt.show()

